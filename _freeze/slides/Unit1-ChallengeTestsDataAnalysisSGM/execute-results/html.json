{
  "hash": "80ffe0c8e033520cd56e4058a8a25adb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fitting Secondary Growth Models\"\nsubtitle: \"Statistical Examination of Challenge Test Data and Modelling\"\ndate: \"2024/04/30\"\nauthor:\n  - name: Vasco Cadavez\n    affiliations:\n      - \"[Polytechnic Institute of Bragança](https://www.ipb.pt/vcadavez/)\"\n      - \"[Mountain Research Center](https://cimo.ipb.pt)\"\n\n  - name: Ursula Gonzales-Barron\n    affiliations:\n      - \"[Polytechnic Institute of Bragança](https://www.ipb.pt/vcadavez/)\"\n      - \"[Mountain Research Center](https://cimo.ipb.pt/)\"\n#footer:  \"eSafefood\"\n#logo: images/logo.png\neditor: source\nformat: \n  revealjs:\n    height: 1000\n    width: 1500\n    multiplex: true\n    theme: [\"../css/esafefood.scss\"]\n    slide-number: c/t\n    incremental: false\n    title-slide-attributes:\n      data-background-image: ../images/background_title.jpg\n      data-background-size: contain\n    transition: fade\n    toc: false\n    toc-depth: 1\n    toc-title: Contents\n    number-sections: false\n    number-depth: 1\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    embed-resources: true\nbibliography: ../files/esafefood.bib\nexecute:\n  freeze: auto\n---\n\n\n## Objectives {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- **You will learn** how to:\n  - `Import` a `.csv` file to `R` software \n  - `Check` a data set  \n  - `Select` an adequate `secondary model`\n  - `Fit` a secondary model\n  - `Examine` the `fitting results`\n  - `Obtain` the `confidence` and `prediction` intervals\n\n- **Materials needed**:\n  - This presentation\n  - The `R` script: `Unit1-ChallengeTestsDataAnalysisSGM.R`\n  - The accompanying video\n\n::: {.notes}\nSpeaker notes go here.\n:::\n\n\n# Data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- `Growth rate` values of salmonella in broth\n- The [`listeria.csv`](../data/listeria.csv) file has three columns (`Temp`, `GR`  `sqrtGR`) and 29 observations\n  - `Temp` is the temperature used to measure the growth rate\n  - `GR` is the growth rate\n  - `sqrtGR` is the square root of the growth rate\n\n- Lets read the `listeria.csv` with the `read.csv()` function and save it as data frame (`df`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"../data/listeria.csv\", sep=\";\", header=TRUE)\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Temp      GR sqrtGR\n1  0.7 0.00000 0.0000\n2  3.4 0.00034 0.0185\n3  7.6 0.00127 0.0356\n4  9.6 0.00166 0.0407\n5 11.2 0.00230 0.0480\n6 12.8 0.00256 0.0506\n```\n\n\n:::\n:::\n\n\n::: {.notes}\nData were obtained by fitting a `primary model` to different `isothermal` experiments\n:::\n\n## Data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Lets, check the dataset using the structure (`str()`) function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t28 obs. of  3 variables:\n $ Temp  : num  0.7 3.4 7.6 9.6 11.2 12.8 14.1 15.4 16.9 18.2 ...\n $ GR    : num  0 0.00034 0.00127 0.00166 0.0023 0.00256 0.00311 0.00423 0.00452 0.00587 ...\n $ sqrtGR: num  0 0.0185 0.0356 0.0407 0.048 0.0506 0.0558 0.065 0.0672 0.0766 ...\n```\n\n\n:::\n:::\n\n\n- We confirm that the data set is composed of 3 variables (columns)\n  - `Temp`: temperature\n  - `GR`: growth rate\n  - `sqrtGR`: square root of the growth rate\n\n## Check the data shape {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Check the data by plotting the `sqrtGR` against `Temperature`\n  - We can observe a non-linear relationship\n\n::: {.columns}\n::: {.column}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(GR ~ Temp, data=df,\n     xlab=\"Temperature (ºC)\", ylab=\"Growth rate\")\n```\n\n::: {.cell-output-display}\n![](Unit1-ChallengeTestsDataAnalysisSGM_files/figure-revealjs/gr-1.png){width=960}\n:::\n:::\n\n:::\n\n::: {.column}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sqrtGR ~ Temp, data=df,\n     xlab=\"Temperature (ºC)\", ylab=\"Growth rate\")\n```\n\n::: {.cell-output-display}\n![](Unit1-ChallengeTestsDataAnalysisSGM_files/figure-revealjs/sqrtgr-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n\n# Secondary models {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Secondary models {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Describe the influence of `environmental factors` on microbial `growth rate`\n- Can be generally classified as:\n  - Arrhenius-type models\n  - Belehradek-type models\n  - Square-root models\n  - Cardinal parameter models\n\n- When adjusting a `secondary model`, using directly the `untransformed growth rate` response variable produces `heterocedastic` models\n- To obtain an `adequate fitting`, the `growth rate` values are often `transformed` by taking the `natural logarithm` or the `square root`\n\n::: {.notes}\nnatural logarithm - in polynomial models\n\nsquare root - in Belehradek-type models\n:::\n\n\n# Model fitting tools {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Software {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- We use the `R` software\n  - Its `free`\n  - Developed for `statistical analysis` and `plots`\n  - Functions to `fit non-linear models` to experimental data\n    - `nls()` function from `the```stats` package\n    - `gsl_nls()` from `gslnls` package (`GNU Scientific Library`)\n    - Others\n \n- Download and install the `R` software: [https://cran.r-project.org/](https://cran.r-project.org/)\n- Install the `predmicror` package: [https://fsqanalytics.github.io/predmicror/](https://fsqanalytics.github.io/predmicror/)\n\n## Software {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Install the `predmicror` package from GitHub repository\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"fsqanalytics/predmicror\")\n```\n:::\n\n\n- Load the `predmicror` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(predmicror)\n```\n:::\n\n\n# Secondary growth model {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Selected model: Cardinal model for temperature {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- We will use the `Cardinal model for temperature` implemented in the `predmicror` package\n  - [https://fsqanalytics.github.io/predmicror/reference/CMTI.html](https://fsqanalytics.github.io/predmicror/reference/CMTI.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(predmicror)\nCMTI\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, Tmax, Tmin, MUopt, Topt) \n{\n    if (!requireNamespace(\"gslnls\", quietly = TRUE)) {\n        stop(\"Package \\\"gslnls\\\" must be installed to use this function.\", \n            call. = FALSE)\n    }\n    CMT <- ifelse(x <= Tmin | x >= Tmax, 0, MUopt * (((x - Tmax) * \n        (x - Tmin)^2)/((Topt - Tmin) * ((Topt - Tmin) * (x - \n        Topt) - (Topt - Tmax) * (Topt + Tmin - 2 * x)))))\n    result <- sqrt(CMT)\n    return(result)\n}\n<bytecode: 0x57af77b9bab0>\n<environment: namespace:predmicror>\n```\n\n\n:::\n:::\n\n\n# Fitting procedure {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Starting values {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- To fit `non-linear models` we need to we need to supply `starting values` for the model parameters\n- So, lets start by defining the starting values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart.values = list(Tmax=47, Tmin=0.1, MUopt=0.020, Topt=37)\n```\n:::\n\n\n## Fit using gsl_nls() function {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Now we can fit the `CMTI` model to the experimental data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(predmicror)\nlibrary(gslnls)\nfit <- gsl_nls(sqrtGR ~ CMTI(Temp,Tmax,Tmin,MUopt,Topt),\n           data=df,\n           start =  start.values\n           )\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNonlinear regression model\n  model: sqrtGR ~ CMTI(Temp, Tmax, Tmin, MUopt, Topt)\n   data: df\n    Tmax     Tmin    MUopt     Topt \n44.27284  1.38405  0.02139 37.33238 \n residual sum-of-squares: 0.000484\n\nAlgorithm: multifit/levenberg-marquardt, (scaling: more, solver: qr)\n\nNumber of iterations to convergence: 6 \nAchieved convergence tolerance: 3.619e-09\n```\n\n\n:::\n:::\n\n\n## Check fitting results {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Now we can summarise and inspect the fitting results by using the `summary()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: sqrtGR ~ CMTI(Temp, Tmax, Tmin, MUopt, Topt)\n\nParameters:\n       Estimate Std. Error t value Pr(>|t|)    \nTmax  4.427e+01  6.121e-02 723.351   <2e-16 ***\nTmin  1.384e+00  5.564e-01   2.488   0.0202 *  \nMUopt 2.139e-02  4.531e-04  47.211   <2e-16 ***\nTopt  3.733e+01  3.157e-01 118.245   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.004491 on 24 degrees of freedom\n\nNumber of iterations to convergence: 6 \nAchieved convergence tolerance: 3.619e-09\n```\n\n\n:::\n:::\n\n\n- We can extract the model coefficients using the `coef()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoefs <- coef(fit)\ncoefs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       Tmax        Tmin       MUopt        Topt \n44.27284300  1.38405426  0.02139205 37.33238243 \n```\n\n\n:::\n:::\n\n\n## Parameters confidence intervals {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Extract the confidence intervals of the parameters using the `confint()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        2.5 %      97.5 %\n1 44.14652164 44.39916436\n2  0.23575472  2.53235380\n3  0.02045686  0.02232723\n4 36.68076914 37.98399571\n```\n\n\n:::\n:::\n\n\n## Plot the fitted values {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Define a vector with auxiliary temperature data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.temp=seq(0.7,44, by=0.2)\n```\n:::\n\n\n- Use the `predict()` function to compute the prediction interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits <- predict(fit,\n                newdata = data.frame(Temp=new.temp),\n                interval = \"prediction\", level = 0.95)\nstr(fits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:217, 1:3] 0 0 0 0 0.000574 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : chr [1:3] \"fit\" \"lwr\" \"upr\"\n```\n\n\n:::\n:::\n\n\n- Check the `fits` object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(fits[, ])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              fit          lwr         upr\n[1,] 0.0000000000 -0.009268608 0.009268608\n[2,] 0.0000000000 -0.009268608 0.009268608\n[3,] 0.0000000000 -0.009268608 0.009268608\n[4,] 0.0000000000 -0.009268608 0.009268608\n[5,] 0.0005735376 -0.008828908 0.009975983\n[6,] 0.0015625183 -0.007836776 0.010961813\n```\n\n\n:::\n:::\n\n\n## Plot confidence interval {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   Create a plot of the original data with the fitted values superimposed\n-   Plot the observed data using the `plot()` function\n-   Use the `lines()` function to add the confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sqrtGR ~ Temp, data=df, ylim=c(0,.2))\nlines(new.temp, fits[, 1], col=\"blue\")\nlines(new.temp, fits[, 2], col=\"red\")\nlines(new.temp, fits[, 3], col=\"red\")\n```\n\n::: {.cell-output-display}\n![](Unit1-ChallengeTestsDataAnalysisSGM_files/figure-revealjs/plotPred-1.png){width=960}\n:::\n:::\n\n\n## To start {background-image=\"../images/background.png\" background-size=\"contain\"}\n\nShiny app CardinalFit: [https://ubarron.shinyapps.io/CardinalFit/](https://ubarron.shinyapps.io/CardinalFit/)\n\n## References {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n\n---\nnocite: |\n  @brooks2012jawetz, @Ratkowsky1983, @McMeekin1993book, @Dolan2013, @Barron2019-handbook\n---\n\n\n::: {#refs}\n:::\n",
    "supporting": [
      "Unit1-ChallengeTestsDataAnalysisSGM_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}