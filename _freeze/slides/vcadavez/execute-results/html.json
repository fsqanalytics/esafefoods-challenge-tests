{
  "hash": "d8bae3cc269776c1cf8e22adc86a9aa1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistical Examination of Challenge Test Data and Modelling\"\nsubtitle: \"Workshop: Making the Most of Microbiological Challenge Test Data\"\ndate: \"April 2024\"\nauthor:\n  - name: Vasco Cadavez\n    affiliation:\n      - id: ipb\n        name: \"[Polytechnic Institute of Bragan√ßa (PT)](https://www.ipb.pt/vcadavez/)\"\n        department: Animal Science\n  - name: Ursula Gonzales-Barron\n    affiliation:\n      - ref: ipb\n        department: \"[Mountain Research Center]()\"\n#footer:  \"e-Safefoods\"\n#logo: ./images/logo.png\neditor: source\nformat: \n  revealjs:\n    height: 1000\n    width: 1500\n#    theme: sky #serif\n    multiplex: true\n    theme: [\"../css/esafefoods.scss\"]\n    slide-number: c/t\n    incremental: false\n    title-slide-attributes:\n      data-background-image: ../images/background_title.jpg\n      data-background-size: contain\n    transition: fade\n    toc: true\n    toc-depth: 1\n    toc-title: Contents\n    number-sections: false\n    number-depth: 1\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    embed-resources: true\nbibliography: ../files/esafefood.bib\nexecute:\n  freeze: auto\n---\n\n\n# Objectives {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Objectives {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n::: columns\n::: {.column width=\"50%\"}\n\nAfter reading the Unit, you shall be able to:\n\n1. Plot the bacterial growth data\n\n2. Check the data to select the adequate non-linear model \n\n3. Fit a primary growth model to experimental data and obtain parameter estimates\n\n4. Examine the fitting result\n\n5. Build plots with confidence and prediction intervals\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](../images/growth.png){width=\"15cm\"}\n\n:::\n:::\n\n\n# Introduction {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Non-linear models {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Microbial growth curve is of a sigmoidal nature\n\n- Sigmoidal functions have been widely used to fit microbial growth data\n\n- The parameters of the non-linear models can be used to characterise the:\n  - lag time\n  - growth rate\n  - generation time\n  \n  \n## Model fitting tools {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Fitting non-linear models to experimental data\n  - Non-linear least squares (NLS)\n\n- The `R` software as several NLS functions implemented\n    - `nls()` function \n    - `gsl_nls()` function from `gslnls` package\n\n\n# Software and data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Software {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   `R` software is free and severall packages are available to fit non-linear models to experimental data\n-   Download and install the [R software](https://cran.r-project.org/)\n-   Install the [predmicror](https://fsqanalytics.github.io/predmicror/) package\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github('vcadavez/predmicror')\n```\n:::\n\n\n-   Load the `predmicror` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(predmicror)\n```\n:::\n\n\n## Example data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   In this example, we will use data `challenge.csv`\n    -   Challenge trials, carried out at 8 $^o$C in three batches of fermented sausages\n-   First, we load the data set using the `read.csv()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"../data/challenge.csv\", sep=\";\", header=TRUE)\n```\n:::\n\n\n-   Invoking the first few lines of the data object (`head()` function), we can always make sure that we have the right data set\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  Lot Time  Counts\n1   1    0  0.2000\n2   1    2  0.2072\n3   1    4  1.8072\n4   1    6  5.0000\n5   1    8  8.1999\n6   1   10 11.3998\n```\n\n\n:::\n:::\n\n\n## Data shape {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   Plot `Counts` against `Time` (`plot()` function) to visualise the shape of the curve\n-   Clearly, the `Counts` have a non-log linear sigmoid relationship with `Time`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](vcadavez_files/figure-revealjs/plot-1.png){width=960}\n:::\n:::\n\n\n# Model fitting {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Huang model {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-  The [Huang full growth model](https://fsqanalytics.github.io/predmicror/reference/HuangFM.html) might be a good option to describe the non-linear sigmoid shape of the data\n\n$$Y = Y_0 +Y_{max} -log \\left( e^{Y_0}+(e^{Y_{max}}-e^{Y_0}) \\times e^{-mu \\times B} \\right)$$\n\n## Model fitting {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   The model will be fitted to experimental data using the `gsl_nls()` function from `gslnls` package\n-   First, install the `gslnls` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"gslnls\")\n```\n:::\n\n\n-   We need to supply starting values for the parameters using the argument `start`\n-   So, lets define the starting values of the parameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart.values =  list(Y0=0, Ymax=22, MUmax=1.7, lag=5) \n```\n:::\n\n\n## Model fitting {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   Now we can fit the Huang model to data\n-   Lets start with data from Lot 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(predmicror)\nlibrary(gslnls)\nfit <- gsl_nls(Counts ~ HuangFM(Time, Y0, Ymax, MUmax, lag),\n               data=df[df$Lot==1,],\n               start =  start.values\n               )\n```\n:::\n\n\n-   The fitting was successful\n-   For a detailed summary of the model fit, we can use the `summary()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: Counts ~ HuangFM(Time, Y0, Ymax, MUmax, lag)\n\nParameters:\n       Estimate Std. Error t value Pr(>|t|)    \nY0    2.000e-01  2.466e-05    8111   <2e-16 ***\nYmax  2.050e+01  1.913e-05 1071473   <2e-16 ***\nMUmax 1.600e+00  4.090e-06  391228   <2e-16 ***\nlag   3.000e+00  2.380e-05  126045   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.455e-05 on 8 degrees of freedom\n\nNumber of iterations to convergence: 4 \nAchieved convergence tolerance: 4.963e-08\n```\n\n\n:::\n:::\n\n\n## Model fitting {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   Extract the confidence intervals of the parameters using the `confint()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       2.5 %     97.5 %\n1  0.1999148  0.2000285\n2 20.4998887 20.4999769\n3  1.5999899  1.6000088\n4  2.9999600  3.0000698\n```\n\n\n:::\n:::\n\n\n-   Find the fitted values and the confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits <- predict(fit, \n                 interval = \"confidence\",\n                 level = 0.95)\nfits\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             fit        lwr        upr\n [1,]  0.1999717  0.1999148  0.2000285\n [2,]  0.2072288  0.2071729  0.2072846\n [3,]  1.8072051  1.8071485  1.8072617\n [4,]  4.9999456  4.9999020  4.9999892\n [5,]  8.1999375  8.1999033  8.1999717\n [6,] 11.3998290 11.3997952 11.3998629\n [7,] 14.5972037 14.5971610 14.5972464\n [8,] 17.7348942 17.7348412 17.7349471\n [9,] 20.0258573 20.0258215 20.0258931\n[10,] 20.4755100 20.4754672 20.4755528\n[11,] 20.4989255 20.4988814 20.4989696\n[12,] 20.4998917 20.4998476 20.4999358\n```\n\n\n:::\n:::\n\n\n-   Convert the `fits` object to data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits <- data.frame(fits)\nstr(fits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t12 obs. of  3 variables:\n $ fit: num  0.2 0.207 1.807 5 8.2 ...\n $ lwr: num  0.2 0.207 1.807 5 8.2 ...\n $ upr: num  0.2 0.207 1.807 5 8.2 ...\n```\n\n\n:::\n:::\n\n\n## Model fitting {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Create a plot of the original data with the fitted values superimposed\n- Plot the observed data using the `plot()` function \n- Use the `lines()` function to add the confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(Counts ~ Time, data=df[df$Lot==1,], ylim=c(-2,22))\nlines(df[df$Lot==1,]$Time, fits$fit, col=\"blue\")\nlines(df[df$Lot==1,]$Time, fits$upr, col=\"red\")\nlines(df[df$Lot==1,]$Time, fits$lwr, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](vcadavez_files/figure-revealjs/plotPred-1.png){width=960}\n:::\n:::\n\n\n## Now is your Turn! {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   Adjust the code to fit the Huang full model to:\n\n1.  data from **Lot 2**\n\n2.  data from **Lot 3**\n\n3.  All data\n\n4.  Use the model fitted to the complete data set and predict the bacterial **Counts** after $12$ hours of incubation\n\n## References {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n\n---\nnocite: |\n  @Dolan2013, @Barron2019-handbook, @Buchanan1997, @Zwietering1990, @Baranyi1993Modelling\n---\n\n\n::: {#refs}\n:::\n",
    "supporting": [
      "vcadavez_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}