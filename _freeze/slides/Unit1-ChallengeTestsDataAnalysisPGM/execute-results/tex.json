{
  "hash": "9ddc2db33d4188b2b354338e766a476a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fitting Primary Growth Models\"\nsubtitle: \"Statistical Examination of Challenge Test Data and Modelling\"\ndate: \"2024/04/30\"\nauthor:\n  - name: Vasco Cadavez\n    affiliations:\n      - \"[Polytechnic Institute of Bragança](https://www.ipb.pt/vcadavez/)\"\n      - \"[Mountain Research Center](https://cimo.ipb.pt)\"\n\n  - name: Ursula Gonzales-Barron\n    affiliations:\n      - \"[Polytechnic Institute of Bragança](https://www.ipb.pt/vcadavez/)\"\n      - \"[Mountain Research Center](https://cimo.ipb.pt/)\"\n#footer:  \"e-Safefoods\"\n#logo: ./images/logo.png\neditor: source\nformat: \n  pdf:\n    height: 1000\n    width: 1500\n    multiplex: true\n    theme: [\"../css/esafefood.scss\"]\n    slide-number: c/t\n    incremental: false\n    title-slide-attributes:\n      data-background-image: ../images/background_title.jpg\n      data-background-size: contain\n    transition: fade\n    toc: false\n    toc-depth: 1\n    toc-title: Contents\n    number-sections: false\n    number-depth: 1\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n    embed-resources: true\nbibliography: ../files/esafefood.bib\nexecute:\n  freeze: auto\n---\n\n\n## Objectives {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- **You will learn** how to:\n  - `Import` a `.csv` file to `R` software \n  - `Check` a challenge test data set  \n  - `Select` an adequate `primary growth model`\n  - `Fit` a primary growth model to\n  - `Examine` the `fitting results`\n  - `Obtain` the `confidence` and `prediction` intervals\n\n- **Materials needed**:\n  - This presentation\n  - The `R` script: `PGM-Fitting.R`\n  - The accompanying video\n\n::: {.notes}\nSpeaker notes go here.\n:::\n\n# Data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Challege test data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Growth data example\n  - *E. coli* `challenge test`\n    - data set: `ecoli.csv`\n    - `Experiments` were carried out at `30` and `35` $^o$C\n    - Two batches/repetitions per `condition`\n\n- First, we load the data set using the `read.csv()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"../data/ecoli.csv\", sep=\";\", header=TRUE)\n```\n:::\n\n\n- Lets check the first lines of the file, for that use the `head()`fucntion\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Condition Repetition Time Temp   lnN\n1         1          1    0   30  5.93\n2         1          1    3   30  5.82\n3         1          1    5   30  6.04\n4         1          1    7   30  7.45\n5         1          1    9   30 10.38\n6         1          1   11   30 12.06\n```\n\n\n:::\n:::\n\n\n::: {.notes}\n`Condition` is this case is temperature at which trials were conducted\n:::\n\n## Challege test data {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Check the structure of the data set using the `str()` function\n- We can always make sure that we have the right data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n:::\n\n\n- The data set has 42 `observations` (lines) and 5 `variables`(columns)\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t42 obs. of  5 variables:\n $ Condition : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Repetition: int  1 1 1 1 1 1 1 1 1 1 ...\n $ Time      : num  0 3 5 7 9 11 13 15 16 20 ...\n $ Temp      : int  30 30 30 30 30 30 30 30 30 30 ...\n $ lnN       : num  5.93 5.82 6.04 7.45 10.38 ...\n```\n\n\n:::\n:::\n\n\n\n::: {.notes}\nExplain the variables type:\n- int\n- num\n:::\n\n## Check the data structure {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Check the levels of the variables: `Condition` and `Temp`\n- Use the `table()` function\n\n### Condition\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$Condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2 \n22 20 \n```\n\n\n:::\n:::\n\n\n### Temperature\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$Temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n30 35 \n22 20 \n```\n\n\n:::\n:::\n\n\n### Interaction `Condition`/`Temp` \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$Condition, df$Temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n    30 35\n  1 22  0\n  2  0 20\n```\n\n\n:::\n:::\n\n\n::: {.notes}\nCondition and temperature are the same!\nBecause we just have one factor: Temperature\n:::\n\n## Check the data shape {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Plot `lnN` against `Time`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(data = df, aes(x=Time, y=lnN, group=factor(Temp), colour=factor(Temp))) +\n  geom_point()\n```\n:::\n\n\n::: {.notes}\n\nlnN is counts in natural logarithm scale\n:::\n\n## Check the data shape {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Unit1-ChallengeTestsDataAnalysisPGM_files/figure-pdf/plot2-1.pdf){width=25%}\n:::\n:::\n\n\n- The *E. coli* population (`lnN`) increases along `Time`\n- Clearly, the `lnN` shows a non-linear (`sigmoidal`) relationship with `Time`\n\n\n# Primary growth models {background-image=\"images/background.png\" background-size=\"contain\"}\n\n## Primary growth models {background-image=\"images/background.png\" background-size=\"contain\"}\n\n- Describe the `microorganisms responses` to the `food environments`\n\n- We can predict the `growth behaviour` of the microorganisms for `specific environmental conditions`, such as: pH, salt content, temperature, etc.\n\n- `Primary growth models` are characterised by the `kinetic growth parameters`\n  - $\\lambda$: lag phase duration\n  - $k$: Maximum growth rate, or\n  - $\\mu$: Specific growth rate \n  - $M$: Maximum population density\n\n::: {.notes}\n- These parameters are essential to predict growth behaviour\n:::\n\n\n\n## Primary growth models {background-image=\"images/background.png\" background-size=\"contain\"}\n\n-   Several `primary growth models` have been developed and tested for predictive microbiology applications\n    - Baranyi: [https://fsqanalytics.github.io/predmicror/reference/BaranyiFM.html](https://fsqanalytics.github.io/predmicror/reference/BaranyiFM.html)\n    - Huang: [https://fsqanalytics.github.io/predmicror/reference/HuangFM.html](https://fsqanalytics.github.io/predmicror/reference/HuangFM.html)\n    - Rosso: [https://fsqanalytics.github.io/predmicror/reference/RossoFM.html](https://fsqanalytics.github.io/predmicror/reference/RossoFM.html)\n    \n\n::: {.notes}\n\npredmicror package is a collection of functions used in predictive microbiology\n- full growth models\n- no-lag growth models\n\n:::    \n    \n    \n# Model fitting tools {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Software {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- We use the `R` software: its `free`\n  - Functions to `fit non-linear models` to experimental data\n    - `nls()` function\n    - `gsl_nls()` from `gslnls` package \n    - Others\n \n- Download and install the `R` software: [https://cran.r-project.org/](https://cran.r-project.org/)\n- Install the `predmicror` package: [https://fsqanalytics.github.io/predmicror/](https://fsqanalytics.github.io/predmicror/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"fsqanalytics/predmicror\")\n```\n:::\n\n\n\n# Primary growth model {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Selected model: Huang full model {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- The `Huang full growth model` might be a good option to describe the `sigmoidal` shape of the data\n  - [https://fsqanalytics.github.io/predmicror/reference/HuangFM.html](https://fsqanalytics.github.io/predmicror/reference/HuangFM.html)\n  \n- Model equation \n\n\n$$Y = Y_0 +Y_{max} -log \\left( e^{Y_0}+(e^{Y_{max}}-e^{Y_0}) \\times e^{-mu \\times B} \\right)$$\n\n# Fitting procedure {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n## Starting values {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- To fit `non-linear models` we need to we need to supply `starting values` for the model parameters\n- So, lets start by defining the starting values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart.values = list(Y0=0.0, Ymax=22.0, MUmax=1.7, lag=5.0) \n```\n:::\n\n\n## Fit using nls() function {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Now we can fit the `Huang` model to the experimental data\n- Lets start with data from the `Condition 1` & `Repetition 1`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(predmicror)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n Please cite the 'predmicror' package as: \nVasco Cadavez and Ursula Gonzales-Barron  (2022). predmicror: Fitting predictive microbiology models in r \nIf you have questions, suggestions, or comments \nregarding the 'predmicror' package \nhttps://github.com/fsqanalytics/predmicror\n```\n\n\n:::\n\n```{.r .cell-code}\nfit <- nls(lnN ~ HuangFM(Time, Y0, Ymax, MUmax, lag),\n               data=df[df$Condition==1 & df$Repetition==1, ],\n               start =  start.values\n               )\nfit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNonlinear regression model\n  model: lnN ~ HuangFM(Time, Y0, Ymax, MUmax, lag)\n   data: df[df$Condition == 1 & df$Repetition == 1, ]\n    Y0   Ymax  MUmax    lag \n 5.918 18.840  1.182  5.584 \n residual sum-of-squares: 0.4724\n\nNumber of iterations to convergence: 4 \nAchieved convergence tolerance: 8.356e-06\n```\n\n\n:::\n:::\n\n\n## Check fitting results {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- The fitting was `successful`!\n- For a detailed summary of the model fit we can use the `summary()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: lnN ~ HuangFM(Time, Y0, Ymax, MUmax, lag)\n\nParameters:\n      Estimate Std. Error t value Pr(>|t|)    \nY0     5.91795    0.15454   38.29 2.15e-09 ***\nYmax  18.83981    0.18286  103.03 2.14e-12 ***\nMUmax  1.18173    0.03892   30.36 1.09e-08 ***\nlag    5.58392    0.25000   22.34 9.12e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2598 on 7 degrees of freedom\n\nNumber of iterations to convergence: 4 \nAchieved convergence tolerance: 8.356e-06\n```\n\n\n:::\n:::\n\n\n## Parameters confidence intervals {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- Extract the confidence intervals of the parameters using the `confint()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconfint(fit)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWaiting for profiling to be done...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           2.5%     97.5%\nY0     5.536172  6.279901\nYmax  18.414869 19.274025\nMUmax  1.091606  1.277565\nlag    4.911819  6.143001\n```\n\n\n:::\n:::\n\n\n\n## Plot the fitted values {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n- The `investr` package can be used to compute the confidence intervals of an `nls` object \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(investr)\n```\n:::\n\n\n- Define a vector with auxiliary time data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.times=seq(0,24, by=0.1)\n```\n:::\n\n\n- Use the `predFit()`function to compute the confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits <- predFit(fit,\n                newdata = data.frame(Time=new.times),\n                interval = \"confidence\",\n                level = 0.95)\nhead(fits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          fit      lwr     upr\n[1,] 5.917952 5.552525 6.28338\n[2,] 5.917952 5.552525 6.28338\n[3,] 5.917952 5.552525 6.28338\n[4,] 5.917952 5.552525 6.28338\n[5,] 5.917952 5.552525 6.28338\n[6,] 5.917952 5.552525 6.28338\n```\n\n\n:::\n:::\n\n\n- Convert the `fits` object to data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfits <- data.frame(fits)\nstr(fits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t241 obs. of  3 variables:\n $ fit: num  5.92 5.92 5.92 5.92 5.92 ...\n $ lwr: num  5.55 5.55 5.55 5.55 5.55 ...\n $ upr: num  6.28 6.28 6.28 6.28 6.28 ...\n```\n\n\n:::\n:::\n\n\n## Plot confidence interval {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n-   Create a plot of the original data with the fitted values superimposed\n-   Plot the observed data using the `plot()` function\n-   Use the `lines()` function to add the confidence interval\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(lnN ~ Time, data=df[df$Condition==1 & df$Repetition==1, ], ylim=c(5,20))\nlines(new.times, fits$fit, col=\"blue\")\nlines(new.times, fits$upr, col=\"red\")\nlines(new.times, fits$lwr, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](Unit1-ChallengeTestsDataAnalysisPGM_files/figure-pdf/plotPred-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## References {background-image=\"../images/background.png\" background-size=\"contain\"}\n\n\n---\nnocite: |\n  @Dolan2013, @Barron2019-handbook, @Buchanan1997, @Zwietering1990, @Baranyi1993Modelling\n---\n\n\n::: {#refs}\n:::\n",
    "supporting": [
      "Unit1-ChallengeTestsDataAnalysisPGM_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}